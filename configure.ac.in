dnl
dnl Clipman plugin - Clipboards manager for the Xfce4 panel
dnl
dnl 2005      Eduard Roccatello <eduard@xfce.org>
dnl 2006-2007 Nick Schermer <nick@xfce.org>
dnl 2008-2012 Mike Massonnet <mmassonnet@xfce.org>
dnl

dnl ***************************
dnl *** Version information ***
dnl ***************************
m4_define([project_version_major], [1])
m4_define([project_version_minor], [6])
m4_define([project_version_micro], [4])
m4_define([project_version_build], [@REVISION@])
m4_define([project_version_tag], [git]) # leave empty for release
m4_define([project_version], [project_version_major().project_version_minor().project_version_micro()ifelse(project_version_tag(), [git], [project_version_tag()-project_version_build()], [project_version_tag()])])

dnl minimum required versions
m4_define([glib_min_version], [2.60.0])
m4_define([gtk_min_version], [3.22.29])
m4_define([libxfce4ui_min_version], [4.14.0])
m4_define([libxfce4util_min_version], [4.14.0])
m4_define([libxfce4panel_min_version], [4.14.0])
m4_define([xfconf_minimum_version], [4.14.0])
m4_define([libx11_min_version], [1.6.7])
m4_define([libxproto_min_version], [7.0.0])
m4_define([libxtst_min_version], [1.0.0])
m4_define([wayland_min_version], [1.15.0])
m4_define([libqrencode_min_version], [3.3.0])

dnl ***************************
dnl *** Initialize autoconf ***
dnl ***************************
AC_COPYRIGHT([Copyright (c) 2003-2023
        The Xfce development team. All rights reserved.])
AC_INIT([Clipman], [project_version], [https://gitlab.xfce.org/panel-plugins/xfce4-clipman-plugin], [xfce4-clipman-plugin],
        [https://docs.xfce.org/panel-plugins/xfce4-clipman-plugin/start])
AC_CONFIG_HEADERS([config.h])
AC_PREREQ([2.50])
AC_CANONICAL_TARGET()
AC_REVISION([project_version_build])
AC_CONFIG_MACRO_DIRS([m4])

dnl ***************************
dnl *** Initialize automake ***
dnl ***************************
AM_INIT_AUTOMAKE([1.8 no-dist-gzip dist-bzip2 foreign subdir-objects])
AM_MAINTAINER_MODE()
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

dnl **************************
dnl *** Initialize libtool ***
dnl **************************
LT_PREREQ([2.2.6])
LT_INIT([disable-static])

dnl ********************************
dnl *** Check for basic programs ***
dnl ********************************
AC_PROG_CC()
AM_PROG_CC_C_O()
AC_PROG_INSTALL()
AC_PROG_LN_S()
IT_PROG_INTLTOOL([0.35.0])

dnl **********************************
dnl *** Check for standard headers ***
dnl **********************************
AC_CHECK_HEADERS([locale.h])

dnl ***********************************
dnl *** Check for required packages ***
dnl ***********************************
XDT_CHECK_PACKAGE([GIO], [gio-2.0], [glib_min_version])
XDT_CHECK_PACKAGE([GIO_UNIX], [gio-unix-2.0], [glib_min_version])
XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [glib_min_version])
XDT_CHECK_PACKAGE([GTK], [gtk+-3.0], [gtk_min_version])
XDT_CHECK_PACKAGE([LIBXFCE4UI], [libxfce4ui-2], [libxfce4ui_min_version])
XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0], [libxfce4util_min_version])
XDT_CHECK_PACKAGE([LIBXFCE4PANEL], [libxfce4panel-2.0], [libxfce4panel_min_version])
XDT_CHECK_PACKAGE([XFCONF], [libxfconf-0], [xfconf_min_version])

dnl X11 support
XDT_CHECK_OPTIONAL_PACKAGE([LIBX11], [x11], [libx11_min_version], [libx11], [Libx11 support])
XDT_CHECK_OPTIONAL_PACKAGE([GDKX], [gdk-x11-3.0], [gtk_min_version], [gdk-x11], [GDK X11 support])
XDT_CHECK_OPTIONAL_PACKAGE([LIBXPROTO], [xproto], [libxproto_min_version], [libxproto], [Libxproto support])
XDT_CHECK_OPTIONAL_PACKAGE([LIBXTST], [xtst], [libxtst_min_version], [libxtst], [Libxtst support])

dnl Wayland support
dnl wayland-scanner >= 1.15 is for private-code option to be present
XDT_CHECK_OPTIONAL_PACKAGE([WAYLAND_SCANNER], [wayland-scanner], [wayland_min_version], [wayland-scanner], [Wayland scanner support])
XDT_CHECK_OPTIONAL_PACKAGE([WAYLAND_CLIENT], [wayland-client], [wayland_min_version], [wayland-client], [Wayland client support])
if test x"$WAYLAND_SCANNER_FOUND" = x"yes" && test x"$WAYLAND_CLIENT_FOUND" = x"yes"; then
  WAYLAND_FOUND="yes"
  AC_DEFINE([HAVE_WAYLAND], [1], [Wayland support])
fi
AM_CONDITIONAL([HAVE_WAYLAND], [test x"$WAYLAND_SCANNER_FOUND" = x"yes" && test x"$WAYLAND_CLIENT_FOUND" = x"yes"])

dnl *****************************
dnl *** Check for libqrencode ***
dnl *****************************
XDT_CHECK_OPTIONAL_PACKAGE([QRENCODE], [libqrencode], [libqrencode_min_version], libqrencode, [QR Code support])

dnl ******************************
dnl *** Check for i18n support ***
dnl ******************************
XDT_I18N([@LINGUAS@])

dnl ***********************************
dnl *** Check for debugging support ***
dnl ***********************************
XDT_FEATURE_DEBUG()

dnl ************************
dnl *** Makefile outputs ***
dnl ************************
AC_CONFIG_FILES([
Makefile
data/Makefile
data/appdata/Makefile
data/icons/Makefile
data/icons/16x16/Makefile
data/icons/24x24/Makefile
data/icons/32x32/Makefile
data/icons/48x48/Makefile
data/icons/64x64/Makefile
data/icons/scalable/Makefile
clipboard-manager/Makefile
panel-plugin/Makefile
tests/Makefile
po/Makefile.in
protocols/Makefile
])
AC_OUTPUT

dnl ***************************
dnl *** Print configuration ***
dnl ***************************
echo
echo "Build Configuration:"
echo
echo "    * Debug Support:    $enable_debug"
echo "    * X11 Support:      ${LIBX11_FOUND:-no}"
echo "    * Libxtst Support:  ${LIBXTST_FOUND:-no}"
echo "    * Wayland Support:  ${WAYLAND_FOUND:-no}"
echo "    * QR Code Support:  ${QRENCODE_FOUND:-no}"
echo
